--For each store, list the top three most frequently sold product categories and the total revenue generated by each.

WITH category_sales AS (
    SELECT
        st.store_id,
        st.store_name,
        p.category,
        COUNT(s.qty) AS frequency,
        SUM(s.qty * s.unit_price * (1 - s.discount_percentage)) AS total_revenue,
        RANK() OVER (PARTITION BY st.store_id ORDER BY COUNT(s.qty) DESC) AS rank
    FROM sales s
    JOIN products p ON s.product_id = p.product_id
    JOIN stores st ON s.store_id = st.store_id
    GROUP BY st.store_id, st.store_name, p.category
)
SELECT store_id, store_name, category, frequency, total_revenue
FROM category_sales
WHERE rank <= 3
ORDER BY store_id, rank;

-- Find the top five stores by sales quantity for products in the "Kitchen" category, with rankings adjusted based on discount levels


WITH kitchen_sales AS (
    SELECT
        st.store_id,
        st.store_name,
        SUM(s.qty) AS total_quantity,
        AVG(s.discount_percentage) AS avg_discount,
        RANK() OVER (ORDER BY SUM(s.qty) DESC, AVG(s.discount_percentage) ASC) AS adjusted_rank
    FROM sales s
    JOIN products p ON s.product_id = p.product_id
    JOIN stores st ON s.store_id = st.store_id
    WHERE p.category = 'Kitchen'
    GROUP BY st.store_id, st.store_name
)
SELECT store_id, store_name, total_quantity, avg_discount, adjusted_rank
FROM kitchen_sales
WHERE adjusted_rank <= 5
ORDER BY adjusted_rank;


--For each product category, identify the top-performing stores based on total sales revenue and assign a performance rank to each

WITH store_category_revenue AS (
    SELECT
        p.category,
        st.store_id,
        st.store_name,
        SUM(s.qty * s.unit_price * (1 - s.discount_percentage)) AS total_revenue,
        RANK() OVER (PARTITION BY p.category ORDER BY SUM(s.qty * s.unit_price * (1 - s.discount_percentage)) DESC) AS performance_rank
    FROM sales s
    JOIN products p ON s.product_id = p.product_id
    JOIN stores st ON s.store_id = st.store_id
    GROUP BY p.category, st.store_id, st.store_name
)
SELECT category, store_id, store_name, total_revenue, performance_rank
FROM store_category_revenue
WHERE performance_rank = 1
ORDER BY category;


--List products with inventory levels below their reorder level and sales quantities above the average for their category

WITH avg_sales_category AS (
    SELECT
        p.category,
        AVG(s.qty) AS avg_quantity
    FROM sales s
    JOIN products p ON s.product_id = p.product_id
    GROUP BY p.category
),
product_sales AS (
    SELECT
        p.product_id,
        p.product_name,
        p.category,
        i.current_stock,
        i.reorder_level,
        SUM(s.qty) AS total_quantity
    FROM products p
    JOIN inventory i ON p.product_id = i.product_id
    JOIN sales s ON p.product_id = s.product_id
    GROUP BY p.product_id, p.product_name, p.category, i.current_stock, i.reorder_level
)
SELECT 
    ps.product_id, 
    ps.product_name, 
    ps.category, 
    ps.current_stock, 
    ps.reorder_level, 
    ps.total_quantity
FROM product_sales ps
JOIN avg_sales_category ac ON ps.category = ac.category
WHERE ps.current_stock < ps.reorder_level
  AND ps.total_quantity > ac.avg_quantity;


SELECT column_name 
FROM information_schema.columns
WHERE table_name = 'inventory';

--Calculate total revenue and discount applied for each store, categorizing as "High," "Moderate," or "Low" based on predefined ranges

SELECT
    st.store_id,
    st.store_name,
    SUM(s.qty * s.unit_price * (1 - s.discount_percentage)) AS total_revenue,
    AVG(s.discount_percentage) * 100 AS avg_discount_percentage,
    CASE
        WHEN AVG(s.discount_percentage) >= 0.30 THEN 'High'
        WHEN AVG(s.discount_percentage) >= 0.15 THEN 'Moderate'
        ELSE 'Low'
    END AS discount_category
FROM sales s
JOIN stores st ON s.store_id = st.store_id
GROUP BY st.store_id, st.store_name
ORDER BY total_revenue DESC;


-- Identify the month-over-month revenue growth percentage for each store.


WITH category_sales AS (
    SELECT
        st.store_id,
        st.store_name,
        DATE_TRUNC('month', s.order_date) AS revenue_month,
        SUM(s.qty * s.unit_price * (1 - s.discount_percentage)) AS total_revenue
    FROM sales s
    JOIN stores st ON s.store_id = st.store_id
    GROUP BY st.store_id, st.store_name, revenue_month
),
monthly_growth AS (
    SELECT
        store_id,
        store_name,
        revenue_month,
        total_revenue,
        LAG(total_revenue) OVER (PARTITION BY store_id ORDER BY revenue_month) AS previous_month_revenue
    FROM category_sales
)
SELECT
    store_id,
    store_name,
    revenue_month,
    total_revenue,
    ROUND(CAST((total_revenue - previous_month_revenue) / previous_month_revenue * 100 AS NUMERIC), 2) AS revenue_growth_percent
FROM monthly_growth
WHERE previous_month_revenue IS NOT NULL
ORDER BY store_id, revenue_month;

-- Determine the cumulative revenue per store for each quarter.

SELECT
    st.store_id,
    st.store_name,
    DATE_PART('year', s.order_date) AS year,
    DATE_PART('quarter', s.order_date) AS quarter,
    SUM(SUM(s.qty * s.unit_price * (1 - s.discount_percentage))) OVER (
        PARTITION BY st.store_id, DATE_PART('year', s.order_date)
        ORDER BY DATE_PART('quarter', s.order_date)
    ) AS cumulative_revenue
FROM sales s
JOIN stores st ON s.store_id = st.store_id
GROUP BY st.store_id, st.store_name, year, quarter
ORDER BY store_id, year, quarter;







